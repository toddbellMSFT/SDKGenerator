


#### Paul's XPlat Resources
resources:
  repositories:
  # - repository: self
  #   type: github
  #   endpoint: 'GitHub connection MockVMAgent'
  #   name: PlayFab/JenkinsConsoleUtility
  #   path: .
  #   trigger:
  #     - master
  # - repository: 'JenkinsSdkSetupScripts'
  #   type: github
  #   endpoint: 'GitHub connection MockVMAgent'
  #   name: JenkinsSdkSetupScripts
  #   path: .
  #   trigger:
  #     - master
  - repository: API_Specs
    type: github
    endpoint: 'GitHub connection MockVMAgent'
    name: PlayFab/API_Specs
    path: ./API_Specs
    trigger:
      - master
  # - repository: SdkGenerator
  #   type: github
  #   endpoint: 'GitHub connection MockVMAgent'
  #   name: PlayFab/SdkGenerator
  #   path: ./SdkGenerator
  #   trigger:
  #     - master
  - repository: CSharpSDK
    type: github
    endpoint: 'GitHub connection MockVMAgent'
    name: PlayFab/CSharpSDK
    path: ./sdks/
    trigger:
      - master
####


# resources:
#   repositories:
#     - repository: 'JenkinsSdkSetupScripts'
#       type: github
#       endpoint: 'GitHub connection MockVMAgent'
#       name: JenkinsSdkSetupScripts
#     - repository: 'CSharpSDK'
#       type: github
#       endpoint: 'GitHub connection MockVMAgent'
#       name: CSharpSDK
#       path: /sdks/CSharpSDK

trigger:
- master

pool:
  vmImage: 'windows-latest'

steps:
- checkout: self
  path: s
- checkout: API_Specs
  path: s/API_Specs
- checkout: CSharpSDK
  path: s/sdks/CSharpSDK

- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- script: |
    npm install
    npm run build
  displayName: 'npm install and build'

- script: |
    cd ..
    pwd
    ls
  displayName: 'Cloning CSharpSDK for genConfig'

- script: |
    ls
    cd s
    cd SDKBuildScripts/Windows
    ./csharp_build.bat
  displayName: 'Generating CSharpSDK'

- task: UseDotNet@2
  displayName: 'Use .NET Core 2.x sdk'
  inputs:
    packageType: sdk
    version: 2.x
    installationPath: $(Agent.ToolsDirectory)/dotnet

# - script: |
#     echo SANITY CHECK FOR PREVIOUS DOT NET CHANGE
#     dotnet --list-sdks
#   displayName: 'looking for dot net version'

- task: NuGetCommand@2
  displayName: 'Nuget Restore CSharpSDK UnitTest'
  inputs:
    command: 'restore'
    restoreSolution: '../sdks/CSharpSDK/PlayFabSDK/PlayFabSDK+Unit.sln'
    feedsToUse: 'select'

- task: VSBuild@1
  displayName: 'Build CSharpSDKUnitTest: Release'
  inputs:
    solution: '../sdks/CSharpSDK/PlayFabSDK/PlayFabSDK+Unit.sln'
    configuration: 'Release'
    clean: true
    msbuildArchitecture: 'x64'

# TODO: this technically should work. But we don't have a release, maybe that's inappropriate though for a private repo.
# - task: DownloadGitHubRelease@0
#   inputs:
#     connection: 'GitHub connection MockVMAgent'
#     userRepository: 'PlayFab/JenkinsSdkSetupScripts'
#     defaultVersionType: 'latest'
#     downloadPath: '$(System.ArtifactsDirectory)'

- script: |
    git clone https://github.com/PlayFab/JenkinsSdkSetupScripts.git
    cd ../sdks/CSharpSDK/PlayFabSDK/UnittestRunner/bin/Release/netcoreapp2.0/
    dotnet .\UnitTestRunner.dll -testInputsFile '$(System.ArtifactsDirectory)'/JenkinsSdkSetupScripts/JenkinsSdkSetupScripts/Creds/testTitleData.json
  displayName: 'CSharpSDK UnitTestRunner'

# - task: DotNetCoreCLI@2
#   displayName: 'CSharpSDK UnitTest Run'
#   inputs:
#     command: 'run'
#     projects: '../sdks/CSharpSDK/PlayFabSDK/UnittestRunner/bin/Release/netcoreapp2.0/UnittestRunner.dll'
#     arguments: '-o ../sdks/CSharpSDK/PlayFabSDK/UnittestRunner/bin/Release/netcoreapp2.0/ -testInputsFile SYNCJENKINSADDTESTTITLEDATAJSON'
#     modifyOutputPath: true

