
### NOTE: JenkinsSdkSetupScripts can't be in the root of this pipeline.
resources:
  repositories:
  - repository: 'JenkinsSdkSetupScripts'
    type: github
    endpoint: 'GitHub connection MockVMAgent'
    name: PlayFab/JenkinsSdkSetupScripts
    path: s/JenkinsSdkSetupScripts
    trigger:
      - master
  - repository: API_Specs
    type: github
    endpoint: 'GitHub connection MockVMAgent'
    name: PlayFab/API_Specs
    path: s/API_Specs
    trigger:
      - master
  - repository: CSharpSDK
    type: github
    endpoint: 'GitHub connection MockVMAgent'
    name: PlayFab/CSharpSDK
    path: s/sdks/CSharpSDK
    trigger:
      - master

trigger:
- master

pool:
  vmImage: 'windows-latest'

steps:

- task: PowerShell@2
  displayName: "Create folders for repos (workaround)"
  inputs:
    targetType: inline
    script: |
        New-Item -Path . -Name "JenkinsSdkSetupScripts" -ItemType "directory"
        New-Item -Path . -Name "sdks" -ItemType "directory"
        New-Item -Path . -Name "SDKGenerator" -ItemType "directory"
        New-Item -Path . -Name "API_Specs" -ItemType "directory"
        ls
        cd sdks
        New-Item -Path . -Name "CSharpSDK" -ItemType "directory"
    pwsh: true


- checkout: self
  clean: true
  persistCredentials: true
  path: s/SDKGenerator

- checkout: API_Specs
  clean: true
  persistCredentials: true
  path: s/API_Specs

- checkout: JenkinsSdkSetupScripts
  clean: true
  persistCredentials: true
  path: s/JenkinsSdkSetupScripts

- checkout: CSharpSDK
  clean: true
  persistCredentials: true
  path: s/sdks/CSharpSDK

# - task: NodeTool@0
#   inputs:
#     versionSpec: '10.x'
#   displayName: 'Install Node.js'

# - script: |
#     npm install
#     npm run build
#   displayName: 'npm install and build'

- bash: |
    PF_TEST_TITLE_DATA_JSON="D:/a/1/s/JenkinsSdkSetupScripts/Creds/testTitleData.json"
    export PF_TEST_TITLE_DATA_JSON="$PF_TEST_TITLE_DATA_JSON"
    echo testing $PF_TEST_TITLE_DATA_JSON
    pwd
    ls
    cd ..
    pwd
    ls
  displayName: set testTilteData local environment variable

- script: |
    echo testing 2 %PF_TEST_TITLE_DATA_JSON%
    pwd
    ls
    cd SDKGenerator/SDKBuildScripts/Windows
    csharp_build.bat
  displayName: 'Generating CSharpSDK'


# - script: |
#     echo SANITY CHECK FOR PREVIOUS DOT NET CHANGE
#     dotnet --list-sdks
#   displayName: 'looking for dot net version'

- task: NuGetCommand@2
  displayName: 'Nuget Restore CSharpSDK UnitTest'
  inputs:
    command: 'restore'
    restoreSolution: 'sdks/CSharpSDK/PlayFabSDK/PlayFabSDK+Unit.sln'
    feedsToUse: 'select'

- task: VSBuild@1
  displayName: 'Build CSharpSDKUnitTest: Release'
  inputs:
    solution: 'sdks/CSharpSDK/PlayFabSDK/PlayFabSDK+Unit.sln'
    configuration: 'Release'
    clean: true
    msbuildArchitecture: 'x64'

# - script: |
#     pwd
#     ls
#     cd JenkinsSdkSetupScripts/Creds
#     pwd
#     ls
#     echo copying file
#     cp testTitleData.json D:\a\1\s\sdks\CSharpSDK\PlayFabSDK\UnittestRunner\bin\Release\net45\testTilteData.json
#     echo file should be there now
#     cd ../../..
#     ls
#     cd sdks
#     pwd
#     cd CSharpSDK
#     pwd
#     cd PlayFabSDK
#     pwd
#     cd UnitTestRunner
#     pwd
#     cd bin
#     pwd
#     cd Release
#     pwd
#     cd net45
#     pwd
#     ls
#   displayName: copy TestTitleData.json

- bash: |
    echo bash pf title data is $PF_TEST_TITLE_DATA_JSON
    if [ -f "$PF_TEST_TITLE_DATA_JSON" ]; then
      echo pf test title file exists! according to bash
    else
      echo THE PF TITLE FILE DOES NOT EXIST
    fi
  displayName: bash way

# - bash: |
#     cd sdks/CSharpSDK/PlayFabSDK/UnittestRunner/bin/Release/netcoreapp2.0/
#     echo START NetCore 2.0 UNIT TEST RUNNER with this file: $PF_TEST_TITLE_DATA_JSON
#     dotnet .\UnitTestRunner.dll -testInputsFile '$PF_TEST_TITLE_DATA_JSON'
#   displayName: 'NetCore 2.0 CSharpSDK UnitTestRunner'

- bash: |
    cd sdks/CSharpSDK/PlayFabSDK/UnittestRunner/bin/Release/net45/
    ls
    echo START .Net4.5 UNIT TEST RUNNER
    echo windows script testing this var %PF_TEST_TITLE_DATA_JSON%
    .\UnitTestRunner.exe -testInputsFile '%PF_TEST_TITLE_DATA_JSON%'
  displayName: 'dotNet 45 CSharpSDK UnitTestRunner'

### This doesn' seem to work:
### Info: .NET Core SDK/runtime 2.2 and 3.0 are now End of Life(EOL) and have been removed from all hosted agents. If you're using these SDK/runtimes on hosted agents, kindly upgrade to newer versions which are not EOL, or else use UseDotNet task to install the required version.
### Info: Azure Pipelines hosted agents have been updated to contain .Net Core 3.x (3.1) SDK/Runtime along with 2.1. Unless you have locked down a SDK version for your project(s), 3.x SDK might be picked up which might have breaking behavior as compared to previous versions. 
### Some commonly encountered changes are: 
### If you're using `Publish` command with -o or --Output argument, you will see that the output folder is now being created at root directory rather than Project File's directory. To learn about more such changes and troubleshoot, refer here: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core-cli?view=azure-devops#troubleshooting
### ##[error]Project file(s) matching the specified pattern were not found.
### Finishing: CSharpSDK UnitTest Run

# # - task: UseDotNet@2
# #   displayName: 'Use .NET Core 2.0 sdk'
# #   inputs:
# #     packageType: sdk
# #     version: 2.2.x
# #     installationPath: $(Agent.ToolsDirectory)/dotnet

# # - task: DotNetCoreCLI@2
# #   displayName: 'CSharpSDK UnitTest Run'
# #   inputs:
# #     command: 'run'
# #     projects: '/sdks/CSharpSDK/PlayFabSDK/UnittestRunner/bin/Release/netcoreapp2.0/UnittestRunner.dll'
# #     arguments: '-o /sdks/CSharpSDK/PlayFabSDK/UnittestRunner/bin/Release/netcoreapp2.0/ -testInputsFile %PF_TEST_TITLE_DATA_JSON%'
# #     modifyOutputPath: true
######
